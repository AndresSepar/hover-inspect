// Generated by CoffeeScript 1.7.1
var injected,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

injected = injected || (function() {
  var TinyInspect, enabled, inspector;
  enabled = false;
  TinyInspect = (function() {
    function TinyInspect() {
      this.highlight = __bind(this.highlight, this);
      this.logg = __bind(this.logg, this);
    }

    TinyInspect.prototype.createNodes = function() {
      var appendLogger, appendOverlay;
      (appendOverlay = (function(_this) {
        return function() {
          var $overlayFrag, overlayTemplate;
          overlayTemplate = "<div class='tl-overlayWrap'> <div class='tl-overlayW'></div> <div class='tl-overlayH'></div> <div class='tl-overlay'></div> </div>";
          $overlayFrag = _this.fragmentFromString(overlayTemplate);
          return document.body.appendChild($overlayFrag);
        };
      })(this))();
      (appendLogger = (function(_this) {
        return function() {
          var $logFrag, logTemplate;
          logTemplate = "<div class='tl-loggerWrap'> <code class='language-markup'>&lt;html&gt;</code> </div>";
          $logFrag = _this.fragmentFromString(logTemplate);
          return document.body.appendChild($logFrag);
        };
      })(this))();
      this.$overlayWrap = document.querySelector('.tl-overlayWrap');
      this.$overlayW = document.querySelector('.tl-overlayW');
      this.$overlayH = document.querySelector('.tl-overlayH');
      this.$overlay = document.querySelector('.tl-overlay');
      this.$wrap = document.querySelector('.tl-loggerWrap');
      return this.$code = document.querySelector('.tl-loggerWrap code');
    };

    TinyInspect.prototype.destroy = function() {
      this.$wrap.classList.add('-out');
      document.removeEventListener('mousemove', this.logg);
      this.$overlayWrap.outerHTML = '';
      return setTimeout((function(_this) {
        return function() {
          return _this.$wrap.outerHTML = '';
        };
      })(this), 600);
    };

    TinyInspect.prototype.registerEvents = function() {
      this.highlight();
      return document.addEventListener('mousemove', this.logg);
    };

    TinyInspect.prototype.logg = function(e) {
      var $clone, $target, overlayHStyle, overlayStyle, overlayWStyle, serializer, stringified, targetHeight, targetLeft, targetRect, targetTop, targetWidth;
      $target = e.target;
      targetRect = $target.getBoundingClientRect();
      targetWidth = targetRect.width;
      targetHeight = targetRect.height;
      targetTop = targetRect.top + window.pageYOffset;
      targetLeft = targetRect.left + window.pageXOffset;
      overlayWStyle = "top: " + targetTop + "px; height: " + targetHeight + "px;";
      overlayHStyle = "top: " + window.pageYOffset + "px; left: " + targetLeft + "px; width: " + targetWidth + "px;";
      overlayStyle = "top: " + targetTop + "px; left: " + targetLeft + "px; width: " + targetWidth + "px; height: " + targetHeight + "px;";
      this.$overlayW.style.cssText = overlayWStyle;
      this.$overlayH.style.cssText = overlayHStyle;
      this.$overlay.style.cssText = overlayStyle;
      $clone = $target.cloneNode();
      serializer = new XMLSerializer();
      stringified = serializer.serializeToString($clone);
      stringified = stringified.slice(0, stringified.indexOf('>') + 1).replace(/( xmlns=")(.*?)(")/, '');
      this.$code.innerText = stringified;
      return this.highlight();
    };

    TinyInspect.prototype.highlight = function() {
      return Prism.highlightElement(this.$code);
    };

    TinyInspect.prototype.fragmentFromString = function(strHTML) {
      var temp;
      temp = document.createElement('template');
      temp.innerHTML = strHTML;
      return temp.content;
    };

    return TinyInspect;

  })();
  inspector = new TinyInspect();
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    enabled = !enabled;
    if (enabled) {
      inspector.createNodes();
      return inspector.registerEvents();
    } else {
      return inspector.destroy();
    }
  });
  return true;
})();
