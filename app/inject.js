// Generated by CoffeeScript 1.7.1
var injected,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

injected = injected || (function() {
  var TinyInspect, enabled, inspector;
  enabled = false;
  TinyInspect = (function() {
    function TinyInspect() {
      this.highlight = __bind(this.highlight, this);
      this.logg = __bind(this.logg, this);
    }

    TinyInspect.prototype.createNodes = function() {
      var appendLogger, appendOverlay;
      (appendOverlay = (function(_this) {
        return function() {
          var $overlay;
          $overlay = document.createElement('div');
          $overlay.classList.add('tl-overlay');
          return document.body.appendChild($overlay);
        };
      })(this))();
      (appendLogger = (function(_this) {
        return function() {
          var $code, $logg;
          $logg = document.createElement('div');
          $logg.classList.add('tl-loggerWrap');
          $code = document.createElement('code');
          $code.classList.add('language-markup');
          $code.appendChild(document.createTextNode('<html>'));
          $logg.appendChild($code);
          return document.body.appendChild($logg);
        };
      })(this))();
      this.$overlay = document.querySelector('.tl-overlay');
      this.$wrap = document.querySelector('.tl-loggerWrap');
      return this.$code = document.querySelector('.tl-loggerWrap code');
    };

    TinyInspect.prototype.destroy = function() {
      this.$wrap.classList.add('-out');
      document.removeEventListener('mousemove', this.logg);
      this.$overlay.outerHTML = '';
      return setTimeout((function(_this) {
        return function() {
          return _this.$wrap.outerHTML = '';
        };
      })(this), 600);
    };

    TinyInspect.prototype.registerEvents = function() {
      this.highlight();
      return document.addEventListener('mousemove', this.logg);
    };

    TinyInspect.prototype.logg = function(e) {
      var $clone, $target, overlayStyleString, serializer, stringified, targetRect;
      $target = e.target;
      targetRect = $target.getBoundingClientRect();
      overlayStyleString = "width: " + targetRect.width + "px; height: " + targetRect.height + "px; top: " + (targetRect.top + window.pageYOffset) + "px; left: " + (targetRect.left + window.pageXOffset) + "px;";
      this.$overlay.style.cssText = overlayStyleString;
      $clone = $target.cloneNode();
      serializer = new XMLSerializer();
      stringified = serializer.serializeToString($clone);
      stringified = stringified.slice(0, stringified.indexOf('>') + 1).replace(' xmlns="http://www.w3.org/1999/xhtml"', '');
      this.$code.innerText = stringified;
      return this.highlight();
    };

    TinyInspect.prototype.highlight = function() {
      return Prism.highlightElement(this.$code);
    };

    return TinyInspect;

  })();
  inspector = new TinyInspect();
  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    enabled = !enabled;
    if (enabled) {
      inspector.createNodes();
      return inspector.registerEvents();
    } else {
      return inspector.destroy();
    }
  });
  return true;
})();
